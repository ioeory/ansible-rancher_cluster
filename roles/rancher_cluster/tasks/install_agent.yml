---
# Agent node installation tasks

- name: Get initial server node information
  set_fact:
    init_server_host: "{{ groups['rke_servers'] | map('extract', hostvars) | selectattr('cluster_init', 'defined') | selectattr('cluster_init') | map(attribute='inventory_hostname') | first }}"

- name: Get initial server node IP
  set_fact:
    init_server_ip: "{{ hostvars[init_server_host]['ansible_host'] }}"

- name: Auto-generate server_url (Agent node)
  set_fact:
    server_url: "https://{{ init_server_ip }}:{{ '9345' if cluster_type == 'rke2' else '6443' }}"
  when: server_url is not defined or server_url | length == 0 or 'FIRST_NODE_IP' in server_url

- name: Display agent installation information
  debug:
    msg:
      - "=========================================="
      - "Installing {{ cluster_type | upper }} Agent node"
      - "Initial Server Node: {{ init_server_host }}"
      - "Initial Server IP: {{ init_server_ip }}"
      - "Server URL: {{ server_url }}"
      - "=========================================="

- name: Verify server_url parameter
  assert:
    that:
      - server_url is defined
      - server_url | length > 0
      - "'FIRST_NODE_IP' not in server_url"
    fail_msg: "Failed to auto-retrieve server_url, please check initial server node configuration or manually configure server_url"

- name: Fetch token from server node (preferred)
  slurp:
    src: "{{ token_file }}"
  delegate_to: "{{ groups['rke_servers'][0] }}"
  register: server_token_content
  when: cluster_token is not defined or cluster_token | length == 0
  ignore_errors: yes

- name: Set token fetched from server
  set_fact:
    cluster_token: "{{ server_token_content.content | b64decode | trim }}"
  when:
    - cluster_token is not defined or cluster_token | length == 0
    - server_token_content is defined
    - not server_token_content.failed

- name: Check if local token file exists (fallback)
  stat:
    path: "/tmp/{{ cluster_type }}-token.txt"
  delegate_to: localhost
  become: false
  register: local_token_file
  when: cluster_token is not defined or cluster_token | length == 0

- name: Read token from local file (fallback)
  set_fact:
    cluster_token: "{{ lookup('file', '/tmp/' + cluster_type + '-token.txt') | trim }}"
  when:
    - cluster_token is not defined or cluster_token | length == 0
    - local_token_file.stat.exists

- name: Verify token retrieved
  assert:
    that:
      - cluster_token is defined
      - cluster_token | length > 0
    fail_msg: "Failed to retrieve cluster_token, please ensure server node is installed or manually configure cluster_token"

- name: Display token retrieval status
  debug:
    msg: "✓ Successfully retrieved cluster_token ({{ 'from server node' if (server_token_content is defined and not server_token_content.failed) else 'from local file' }})"

- name: Update local token file
  copy:
    content: "{{ cluster_token }}"
    dest: "/tmp/{{ cluster_type }}-token.txt"
    mode: '0600'
  delegate_to: localhost
  become: false
  when:
    - cluster_token is defined
    - cluster_token | length > 0

- name: Create configuration directory
  file:
    path: "{{ config_dir }}"
    state: directory
    mode: '0755'

- name: Generate configuration file
  template:
    src: config.yaml.j2
    dest: "{{ config_file }}"
    mode: "{{ config_file_mode }}"
  notify: restart {{ cluster_type }}

- name: Download installation script
  get_url:
    url: "{{ china_install_script_url if china_region else install_script_url }}"
    dest: "/tmp/{{ cluster_type }}-install.sh"
    mode: '0755'
    timeout: 120
  retries: "{{ download_retries }}"
  delay: 5

- name: Set installation environment variables
  set_fact:
    install_env: "{{ install_env_vars | default({}) }}"

- name: Add version environment variable (RKE2)
  set_fact:
    install_env: "{{ install_env | combine({'INSTALL_RKE2_VERSION': install_version}) }}"
  when:
    - cluster_type == 'rke2'
    - install_version is defined
    - install_version | length > 0

- name: Add version environment variable (K3S)
  set_fact:
    install_env: "{{ install_env | combine({'INSTALL_K3S_VERSION': install_version}) }}"
  when:
    - cluster_type == 'k3s'
    - install_version is defined
    - install_version | length > 0

- name: Execute installation script (RKE2)
  shell: |
    {% for key, value in install_env.items() %}
    export {{ key }}="{{ value }}"
    {% endfor %}
    INSTALL_RKE2_TYPE="agent" sh /tmp/{{ cluster_type }}-install.sh
  args:
    creates: "{{ binary_path }}"
  async: "{{ install_timeout }}"
  poll: 15
  when: cluster_type == 'rke2'

- name: Execute installation script (K3S Agent)
  shell: |
    {% for key, value in install_env.items() %}
    export {{ key }}="{{ value }}"
    {% endfor %}
    INSTALL_K3S_EXEC="agent" sh /tmp/{{ cluster_type }}-install.sh
  args:
    creates: "{{ binary_path }}"
  async: "{{ install_timeout }}"
  poll: 15
  when: cluster_type == 'k3s'

- name: Start service
  systemd:
    name: "{{ service_name }}"
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for node to join cluster
  pause:
    seconds: 60
    prompt: "Waiting for Agent node to join cluster..."

- name: Agent installation completed
  debug:
    msg:
      - "=========================================="
      - "✓ {{ cluster_type | upper }} Agent node installed successfully"
      - "Node joined cluster: {{ server_url }}"
      - "Please execute 'kubectl get nodes' on server node to verify"
      - "=========================================="
