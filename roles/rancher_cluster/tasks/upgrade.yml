---
# Cluster upgrade tasks

- name: Load cluster-specific variables
  include_vars: "../roles/rancher_cluster/vars/{{ cluster_type }}.yml"

- name: Display upgrade information
  debug:
    msg:
      - "=========================================="
      - "Starting {{ cluster_type | upper }} upgrade"
      - "Target version: {{ install_version | default('Latest version', true) }}"
      - "=========================================="

- name: Get current version
  shell: |
    {{ binary_path }} --version | head -1
  register: current_version
  changed_when: false

- name: Display current version
  debug:
    msg: "Current version: {{ current_version.stdout }}"

- name: Pre-upgrade backup
  include_tasks: backup.yml
  when: 
    - backup_before_upgrade | bool
    - node_role == 'server'

- name: Confirm upgrade
  pause:
    prompt: "Confirm cluster upgrade? Press Enter to continue, Ctrl+C to cancel"
  when: 
    - not ansible_check_mode
    - not (skip_upgrade_confirmation | default(false))
  run_once: yes

- name: Download new version installation script
  get_url:
    url: "{{ china_install_script_url if china_region else install_script_url }}"
    dest: "/tmp/{{ cluster_type }}-install.sh"
    mode: '0755'
    force: yes
    timeout: 120
  retries: "{{ download_retries }}"
  delay: 5

- name: Set installation environment variables (base)

  set_fact:
    install_env: {}

- name: Add China mirror environment variables (RKE2)
  set_fact:
    install_env: "{{ install_env | combine(china_mirror_env) }}"
  when:
    - china_region | bool
    - cluster_type == 'rke2'

- name: Add China mirror environment variables (K3S)
  set_fact:
    install_env: "{{ install_env | combine(china_mirror_env) }}"
  when:
    - china_region | bool
    - cluster_type == 'k3s'

- name: Add version environment variable (RKE2)
  set_fact:
    install_env: "{{ install_env | combine({'INSTALL_RKE2_VERSION': install_version}) }}"
  when:
    - cluster_type == 'rke2'
    - install_version is defined
    - install_version | length > 0

- name: Add version environment variable (K3S)
  set_fact:
    install_env: "{{ install_env | combine({'INSTALL_K3S_VERSION': install_version}) }}"
  when:
    - cluster_type == 'k3s'
    - install_version is defined
    - install_version | length > 0

- name: Execute upgrade (RKE2)
  shell: |
    {% for key, value in install_env.items() %}
    export {{ key }}="{{ value }}"
    {% endfor %}
    INSTALL_RKE2_TYPE="{{ node_role }}" sh /tmp/{{ cluster_type }}-install.sh
  async: "{{ upgrade_timeout }}"
  poll: 15
  when: cluster_type == 'rke2'
  register: upgrade_result

- name: Execute upgrade (K3S)
  shell: |
    {% for key, value in install_env.items() %}
    export {{ key }}="{{ value }}"
    {% endfor %}
    INSTALL_K3S_EXEC="{{ node_role }}" sh /tmp/{{ cluster_type }}-install.sh
  async: "{{ upgrade_timeout }}"
  poll: 15
  when: cluster_type == 'k3s'
  register: upgrade_result

- name: Restart service
  systemd:
    name: "{{ service_name }}"
    state: restarted
    daemon_reload: yes
  register: restart_result
  failed_when: false

- name: Initial wait (give service time to start)
  pause:
    seconds: 30
  when: restart_result.failed | default(false)

- name: Smart wait for service status (accept active or activating)
  shell: |
    systemctl is-active {{ service_name }} || systemctl status {{ service_name }} | grep -q "activating"
  register: service_check
  retries: 30
  delay: 20
  until: service_check.rc == 0
  changed_when: false
  failed_when: false

- name: Wait for API Server port ready (Server node)
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ api_port }}"
    timeout: 300
  when: 
    - node_role == "server"
    - service_check.rc == 0
  ignore_errors: yes

- name: Get detailed service status (if still having issues)
  shell: systemctl status {{ service_name }} --no-pager -l
  register: service_status_detail
  changed_when: false
  when: service_check.rc != 0

- name: Display service status information
  debug:
    msg:
      - "=========================================="
      - "Service Status Check"
      - "Service Name: {{ service_name }}"
      - "Check Result: {{ 'Active/Activating' if service_check.rc == 0 else 'Failed' }}"
      - "=========================================="
      - "{{ service_status_detail.stdout_lines | default([]) }}"
  when: service_check.rc != 0

- name: Final verification (confirm upgrade can continue)
  assert:
    that:
      - service_check.rc == 0 or 'activating' in service_status_detail.stdout | default('')
    fail_msg: |
      Service {{ service_name }} failed to start and is not in activating state
      
      Please manually check:
      1. sudo systemctl status {{ service_name }}
      2. sudo journalctl -u {{ service_name }} -n 100
      3. sudo cat {{ config_file }}
      
      Possible causes:
      • Configuration file error
      • Network connectivity issues
      • Insufficient resources
      • Port conflicts
    success_msg: "Service is running or starting, continuing upgrade process"

- name: Verify post-upgrade version
  shell: |
    {{ binary_path }} --version | head -1
  register: new_version
  changed_when: false

- name: Display new version
  debug:
    msg:
      - "=========================================="
      - "✓ Upgrade completed"
      - "Old version: {{ current_version.stdout }}"
      - "New version: {{ new_version.stdout }}"
      - "=========================================="

- name: Verify node status (Server)
  shell: |
    export KUBECONFIG={{ kubeconfig_path }}
    {{ kubectl_path }} get nodes
  register: node_status
  retries: 10
  delay: 10
  until: node_status.rc == 0
  changed_when: false
  when: node_role == "server"

- name: Display node status
  debug:
    var: node_status.stdout_lines
  when: node_role == "server"
