---
# Preflight checks: Validate system environment

- name: Gather system information
  setup:
    gather_subset:
      - "!all"
      - "!min"
      - "distribution"
      - "hardware"
      - "network"
  tags: always

- name: Display system information
  debug:
    msg:
      - "Operating System: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      - "Kernel Version: {{ ansible_kernel }}"
      - "CPU Architecture: {{ ansible_architecture }}"
      - "CPU Cores: {{ ansible_processor_vcpus }}"
      - "Total Memory: {{ ansible_memtotal_mb }} MB"
  tags: always

- name: Check if operating system is supported
  assert:
    that:
      - ansible_os_family in ['Debian', 'RedHat']
      - >
        (ansible_distribution == 'Debian' and ansible_distribution_major_version | int >= 12) or
        (ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('22.04', '>=')) or
        (ansible_distribution in ['CentOS', 'RedHat', 'Rocky', 'AlmaLinux', 'Anolis'] and ansible_distribution_major_version | int >= 8)
    fail_msg: "Unsupported operating system: {{ ansible_distribution }} {{ ansible_distribution_version }}"
    success_msg: "Operating system check passed"

- name: Check CPU architecture
  assert:
    that:
      - ansible_architecture in ['x86_64', 'aarch64', 'arm64']
    fail_msg: "Unsupported CPU architecture: {{ ansible_architecture }}"
    success_msg: "CPU architecture check passed"

- name: Set architecture variable
  set_fact:
    arch_suffix: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}"

- name: Check memory size (minimum 2GB for server)
  assert:
    that:
      - ansible_memtotal_mb >= 2048
    fail_msg: "Insufficient memory, at least 2GB required, current: {{ ansible_memtotal_mb }} MB"
    success_msg: "Memory check passed"
  when: node_role == "server"

- name: Check memory size (minimum 1GB for agent)
  assert:
    that:
      - ansible_memtotal_mb >= 1024
    fail_msg: "Insufficient memory, at least 1GB required, current: {{ ansible_memtotal_mb }} MB"
    success_msg: "Memory check passed"
  when: node_role == "agent"

- name: Check disk space (minimum 20GB)
  shell: df -BG / | tail -1 | awk '{print $4}' | sed 's/G//'
  register: disk_space
  changed_when: false

- name: Verify disk space
  assert:
    that:
      - disk_space.stdout | int >= 20
    fail_msg: "Insufficient disk space, at least 20GB required, current available: {{ disk_space.stdout }} GB"
    success_msg: "Disk space check passed"

- name: Install required packages (Debian/Ubuntu)
  apt:
    name:
      - curl
      - wget
      - gnupg
      - apt-transport-https
      - ca-certificates
      - software-properties-common
      - iptables
      - conntrack
      - socat
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Install required packages (RHEL/CentOS/Anolis)
  yum:
    name:
      - curl
      - wget
      - iptables
      - conntrack
      - socat
      - container-selinux
      - libseccomp
    state: present
  when: ansible_os_family == "RedHat"

- name: Check systemd version
  command: systemctl --version
  register: systemd_version
  changed_when: false

- name: Verify systemd version
  assert:
    that:
      - systemd_version.stdout_lines[0].split()[1] | int >= 219
    fail_msg: "systemd version too old, requires >= 219"
    success_msg: "systemd version check passed"

- name: Disable swap
  shell: |
    swapoff -a
    sed -i '/swap/d' /etc/fstab
  when: disable_swap | bool
  changed_when: true

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter
  when: load_kernel_modules | bool

- name: Persist kernel modules
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    mode: '0644'
  when: load_kernel_modules | bool

- name: Configure sysctl parameters
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-kubernetes.conf
    reload: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }
    - { name: 'net.ipv4.conf.all.forwarding', value: '1' }
    - { name: 'net.ipv6.conf.all.forwarding', value: '1' }
    - { name: 'vm.swappiness', value: '0' }
  when: configure_sysctl | bool

- name: Check port availability (Server)
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: "{{ item.port }}"
    state: stopped
    timeout: 1
  loop: "{{ server_required_ports }}"
  when: node_role == "server"
  ignore_errors: yes
  register: port_check

- name: Display port check results
  debug:
    msg: "Warning: Port {{ item.item.port }} is already in use ({{ item.item.description }})"
  loop: "{{ port_check.results | default([]) }}"
  when:
    - node_role == "server"
    - item.failed is defined
    - not item.failed
  loop_control:
    label: "{{ item.item.port }}"

- name: Check firewall status (firewalld)
  systemd:
    name: firewalld
  register: firewalld_status
  ignore_errors: yes
  when: ansible_os_family == "RedHat"

- name: Check firewall status (ufw)
  command: ufw status
  register: ufw_status
  changed_when: false
  ignore_errors: yes
  when: ansible_os_family == "Debian"

- name: Display firewall reminder
  debug:
    msg:
      - "Firewall detected running"
      - "Please ensure required ports are open, or set configure_firewall=true for automatic configuration"
  when: >
    (ansible_os_family == 'RedHat' and firewalld_status.status.ActiveState == 'active') or
    (ansible_os_family == 'Debian' and 'Status: active' in ufw_status.stdout)

- name: Set test URL (based on cluster type)
  set_fact:
    rancher_mirror_test_url: "{{ 'https://rancher-mirror.rancher.cn/k3s/k3s-install.sh' if cluster_type == 'k3s' else 'https://rancher-mirror.rancher.cn/rke2/install.sh' }}"
    rancher_mirror_label: "{{ 'Rancher K3S Mirror' if cluster_type == 'k3s' else 'Rancher RKE2 Mirror' }}"
  when: china_region | bool

- name: Test China mirror connectivity
  uri:
    url: "{{ item.url }}"
    method: HEAD
    timeout: 5
    # Accept 2xx (success), 3xx (redirect), 4xx (client error, but server reachable)
    status_code: [200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 301, 302, 303, 304, 305, 306, 307, 308, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451]
  loop:
    - { url: "{{ rancher_mirror_test_url }}", label: "{{ rancher_mirror_label }}" }
    - { url: "https://mirrors.aliyun.com", label: "Aliyun Mirror" }
  register: china_network_test
  ignore_errors: yes
  when: china_region | bool

- name: Display network test results
  debug:
    msg:
      - "âœ“ China mirror connectivity test passed"
      - "  - {{ rancher_mirror_label }}: {{ 'OK (HTTP ' + (china_network_test.results[0].status | string) + ')' if (china_network_test.results[0].status >= 200 and china_network_test.results[0].status < 500) else 'FAILED' }}"
      - "  - Aliyun Mirror: {{ 'OK (HTTP ' + (china_network_test.results[1].status | string) + ')' if (china_network_test.results[1].status >= 200 and china_network_test.results[1].status < 500) else 'FAILED' }}"
  when:
    - china_region | bool
    - china_network_test is defined
    - china_network_test.results is defined

- name: Check if already installed
  stat:
    path: "{{ binary_path }}"
  register: binary_exists

- name: Display already installed reminder
  debug:
    msg:
      - "Detected {{ cluster_type | upper }} already installed"
      - "Binary path: {{ binary_path }}"
      - "Please uninstall first if you need to reinstall"
  when: binary_exists.stat.exists

- name: Preflight check completed
  debug:
    msg: "âœ“ All preflight checks passed, system meets installation requirements"
